
Dokumentation der App 'Werwolf'



1 Spielbeschreibung
2 Appbeschreibung



== 1 Spielbeschreibung ==

Thematisch geht es darum, dass das kleine Dörfchen Düsterwald von Werwölfen heimgesucht wird.
Die Gruppe der Bürger versucht die Wölfe, die sich als Bürger getarnt haben, zu entlarven.
Dagegen versuchen die Wölfe als einzige zu überleben und Widersacher auszuschalten.

= Vorbereitung =

Der Spielleiter mischt alle Charakterkarten und teilt an jeden Spieler verdeckt eine davon aus.
Die Spieler schauen sich ihre Karte an und erkennen nun, ob sie einen Werwolf, einen einfachen
Dorfbewohner oder eine Sonderrolle verkörpern. Danach ruft der Spielleiter zur ersten Nacht aus und
das eigentliche Spiel kann beginnen.

= Nachtphase =

In der Nachtphase schließen alle Spieler die Augen. Der Spielleiter ruft die handelnden Charaktere
einzeln auf. Sie öffnen ihre Augen und führen ihre Aktion aus.

Der <Dieb> ist der erste, der im Spiel erwacht. Wird mit Dieb gespielt, werden zwei Karten mehr
ausgeteilt. Der Dieb darf diese ansehen und seine Karte gegen eine der beiden übrig gebliebenen
Karten austauschen. Er hat ab jetzt also eine neue Rolle. Möchte er nicht tauschen, ist er für den
Rest des Spiels einfacher Dorfbewohner.

<Amor> erwacht nur einmal in der allerersten Nacht, um zwei Spieler seiner Wahl miteinander zu
verkuppeln (eventuell auch sich selbst). Danach schläft er wieder ein. Anschließend berührt der
Spielleiter die beiden Verliebten an der Schulter, sodass diese kurz erwachen können und wissen,
wer der jeweilige Partner ist. Die Verliebten haben im Laufe des Spiels die Aufgabe, den Partner
zu beschützen, denn wenn einer der beiden stirbt, macht es ihm der Partner trauernd nach; sie
dürfen nie gegeneinander stimmen.

Werden die <Werwölfe> vom Spielleiter aufgerufen, wachen sie auf und erkennen sich gegenseitig.
Je nach Spielerzahl gibt es zwei bis vier Wölfe.
Die Wölfe einigen sich durch Gesten auf ein Opfer und schlafen dann wieder ein.
Der Spielleiter merkt sich das Opfer der Werwölfe.

Das kleine <Mädchen> darf nachts in der Werwolf-Phase heimlich blinzeln, um so die Werwölfe zu
erkennen. Die Werwölfe ihrerseits hingegen achten natürlich darauf, das Mädchen dabei zu ertappen,
es besteht also beim Blinzeln ein gewisses Risiko.

Die <Seherin> erwacht in der Nacht alleine und zeigt auf einen Spieler.
Der Spielleiter zeigt der Seherin nun durch Gesten an, ob der entsprechende Spieler gut (Dorfbewohner oder Sonderrolle)
oder böse (Werwolf) ist.
Die Seherin weiß dadurch mehr als die übrigen Dorfbewohner, muss aber mit ihrem Wissen
sorgfältig umgehen, um nicht von den Werwölfen enttarnt zu werden.

Die <Hexe> erwacht immer nachem die Werwölfe ihr Opfer ausgesucht haben.
Sie hat im Verlauf des gesamten Spiels einen Gift- und einen Heiltrank.
Der Spielleiter zeigt auf die Person, die von den Werwölfen als Mordopfer gewählt wurde und die
Hexe kann diese mit ihrem Heiltrank heilen (auch sich selbst), so dass es am nächsten Morgen keine
Toten gibt. Sie kann aber auch den Gifttrank auf einen anderen Spieler anwenden -
dann gibt es mehrere Tote.

Scheidet der <Jäger> aus dem Spiel aus, feuert er in seinem letzten Atemzug noch einen Schuss ab,
mit dem er einen Spieler seiner Wahl mit in den Tod reißt, d.h. er bestimmt einen Spieler,
der mit ihm aus dem Spiel ausscheidet.

= Tagphase =

Am Tag wachen alle Spieler auf. Das Opfer der Werwölfe wird verkündet, es dreht seine Karte um,
gilt als tot und scheidet aus der Runde aus, d. h., er darf keinen Kommentar zum Spiel mehr abgeben.
Nun diskutieren die Dorfbewohner, wer von ihnen ein Werwolf sein könnte. Diese Diskussionsphase
ist das eigentliche Herzstück des Spiels.

Am Ende des Tages gibt es eine sogenannte Abstimmung durch das Dorfgericht, wobei auf Kommando des
Spielleiters jeder, außer den ausgeschiedenen Personen, mit dem Finger auf eine für ihn verdächtige
Person deutet. Wer die meisten Stimmen erhält, scheidet aus. Bei Gleichstand gibt es eine Stichwahl,
bei erneutem Patt entscheidet ein zu Spielbeginn gewählter Hauptmann. Den verbleibenden Spielern
wird die Charakterrolle des ausgeschiedenen Spielers bekanntgeben. Nach dem Tag wird es wieder
Nacht und der Zyklus beginnt von vorn.

= Ende des Spiels =

Das Spiel endet, sobald entweder alle Werwölfe oder alle Bürger tot sind.
Das Ziel der Werwölfe ist es, alle Bürger auszulöschen, während die Dorfbewohner den Wölfen den
Garaus machen wollen. Lediglich wenn das Liebespaar aus einem Werwolf und einem Dorfbewohner besteht,
können diese beiden Spieler nur dann gewinnen, wenn außer ihnen niemand überlebt.






== Appbeschreibung ==

Die App versucht das Spiel so gut wie möglich digital umzusetzen. Dabei ist ein erheblicher Vorteil
die Ersetzung des Spielleiters durch die App. Alle Daten werden in einer Datenbank gespeichert und
die nötigen Berechnungen werden von den spielenden Geräten durchgeführt.

= LoginRegistrationActivity =

Jeder neue Spieler muss sich einen Account erstellen.
Dazu wird ein neuer Eintrag in der Datenbank mit playerID, name, username, password und image
angelegt.
Die Registrierung erfolgt mithilfe die Klasse {@link databaseCon} über die Methode registration.

Bereits registrierte User können sich einfach einloggen. Der Username und das Passwort werden
mithilfe der Methode login verifiziert. Wird die App auf einem Gerät erneut gestartet, auf welchem scih bereits ein Spieler
eingeloggt hat, wird nach Berührung des Startbildschirms automatisch die {@link MenuActivity} gestartet.

Anschließend wird die {@link MenuActivity} gestartet.

= MenuActivity =

In dieser Activity kann sich der Spieler entscheiden, ob er ein neues Spiel starten möchte, welches
die {@link GameSetupActivity} startet.
Andernfalls kann er einem Spiel beitreten, mittels der {@link JoinGameActivity},
oder er öffnet die Einstellungen, wobei die {@link SettingsActivity} geöffnet wird.
Ebenfalls möglich ist das Betrachten der Regeln.

= SettingsActivity =

In der SettingsActivity hat der Spieler die Möglichkeit sein Bild zu ändern. Die Änderung
erfolgt mittels der Funktion setImage der Klasse {@link databaseCon}.
Außerdem kann er seinen Account löschen. Dabei wird die Funktion deleteAccount der Klasse {@link databaseCon} aufgerufen.

= GameSetupActivy =

Diese Activity lässt den Spieler die Einstellungen für das zu erstellende Spiel treffen.
Es gibt einen {@code NumberPicker} für die Auswahl der Anzahl der Spieler.
Außerdem existiert ein {@code Spinner}, der automatisch die benötigte Anzahl an Werwölfen mithilfe
der Funktion setRecommendedNumberOfWer(int players) berechnet. Es steht dem Spieler frei die
Anzahl im Nachhinein zu verändern.
Im Folgenden können die Extrarollen an- bzw. abgewählt werden.
Bei jeder Änderung erfolgt ein Aufruf der Funktion calculateGame. Diese berechnet anhand der Anzahl
der Werwölfe und der Anzahl der Extrarollen die benötigte Anzahl an Dorfbewohnern für das Spiel
und setzt diese automatisch.
Alle teilnehmenden Rollen werden in das cards-Array geschrieben, welches anschließend gemischt wird
und das cardsShuffled-Array entsteht. Wurde der Dieb ausgewählt, so befinden sich zwei Rollen mehr im cardsShuffled-Array
als es Spieler gibt.
Die für das Spiel benötigten Phasen werden gesammelt und die {@link createGameDB()} wird ausgeführt.
Nach erfolgreicher Erstellung des Spiels in der Datenbank wird die {@link QRCodeActivity}
aufgerufen.
Der spielerstellende Spieler ist der Spielleiter (sein Gerät fungiert als Spielleitergerät).

= QRCodeActivity =

Diese Activity erzeugt aus der gameID des erstellten Spiels einen QR-Code der von anderen Spielern
gescannt werden muss, um dem Spiel beizutreten. Erst, wenn alle Spieler dem Spiel beigetreten sind, 
wird die {@link LetsPlayActivity} auf dem Spielleitergerät aufgerufen. 
Wird die "Zurücktaste" in dieser Activity betätigt, erscheint ein PopUp - Fenster (Aufruf {@link popup}) bei 
welchem bestätigt werden muss, dass ins Menu zurückgekehrt werden soll. Wird diese Bestätigung vorgenommen, 
so wird die Methode resetOneGame der Klasse {@link databaseCon} aufgerufen. Im Zuge dessen wird das bereits erstellte
Spiel wieder aus der Datenbank gelöscht (aus den Tabellen "player_game", "_GAME" und "_PHASES") und die {@link MenuActivity} wird
aufgerufen.

= JoinGameActivity =

In dieser Activity kann der Spieler einen, auf einem anderen Handy erzeugten, QR-Code scannen. Hierbei wird die {@link joinGameDB()} ausgeführt.
Mit Hilfe dieser Methode wird der Spieler in die Datenbank (player_game - Tabelle) eingetragen und erhält seine Rolle, welche global
gespeichert wird.
Anschließend wird {@link GetRole} aufgerufen. 

= GetRole =

Mit dem Aufruf dieser Activity wird die der Spielerrolle entsprechenden Karte geladen und kann durch eine Betätigung des Kartensymbols
angezeigt werden. Bei einer weiteren Betätigung dieses wird dem Spieler die seiner Rolle entsprechenden Rollenbeschreibung angezeigt.
Berührt er die Karte erneut, so wird wieder nur die Kartenrückseite angezeigt (die Rolle bleibt verborgen).

Ist der Spieler bereit, so betätigt er des "Bereit" - Button. Sobald alle Spieler bereit sind, wird die {@link LetsPlayActivity} aufgerufen.

= LetsPlayActivity =

Diese Activity dient als Überleitung zum eigentlichen Spiel. Hierbei wird ein Audio von dem Spielleitergerät abgespielt, welches eine 
kurze Einleitung gibt und die Spieler auffordert die Augen zu schließen. Außerdem werden durch die Aufrufe der Methoden getPlayerIDs, 
getPlayerNames und getImagesAsString der Klasse {@link databaseCon} die im Spiel befindlichen PlayerIDs und zugehörigen Namen sowie 
Bilder global gespeichert. Somit stehen diese zu späteren Zeitpunkten zur Verfügung und müssen nicht bei gebrauch von der Datenbank 
abgefragt werden. 

= GameActivity =



= DiebActivity =

Wird die DiebActivity aufgerufen, so wird zu Beginn geprüft, ob der Spieler diese Rolle hat oder nicht. Ist er der Dieb, so bekommt er zwei
Rollen angezeigt. Diese werden mit Hilfe der Methode DiebGetRole der Klasse {@link databaseCon} aus der Datenbank abgefragt. Diese Rollen 
werden mit Hilfe der Rollenkarten auf dem Display des Diebs dargestellt. Wählt er eine aus, so wird ihm die 
Rollenbeschreibung in einem PopUpChoice - Fenster angezeigt, welches mit Hilfe der Klasse {@link popup} erstellt wurde und er kann wählen, 
ob er sich für oder gegen diese Rolle entscheiden will. 
Sind beide wählbaren Rollen Sonderrollen, so bekommt der Dieb auch die Möglichkeit durch einen Extrabutton, dass er ein einfacher Dorfbewohner 
bleiben kann. Ist eine mögliche Wahl ein Werwolf, so hat der Dieb keine andere Wahl, als ein Werwolf zu werden. Es erscheint somit, 
bevor der Dieb eine Wahl treffen kann, ein PopUp - Fenster der Klasse {@link popup}, welches ihm mitteilt, dass er von nun an als Werwolf 
weiter spielen wird. Hat der Dieb seine Wahl getroffen oder das Werwolf-Info-PopUp geschlossen, so wird die {@link DiebDB()} ausgeführt. 

Ist der Spieler nicht der Dieb, so wird ihm ein schwarzer Display angezeigt. Im Hintergrund ruft ein Runnable in konstanten Zeitabständen die 
Klasse {@link getCurrentPhase} auf.

= AmorActivity =

Wird die AmorActivity aufgerufen, so wird zu Beginn geprüft, ob der Spieler diese Rolle hat, oder nicht. Ist er Amor, so wird er 
durch ein PopUp-Info-Fenster der Klasse {@link popup} aufgefordert, zwei Spieler zu wählen, die sich in einander verlieben sollen. 
Dabei werden ihm auf dem Display die Spieler dargestellt, welche mit Hilfe der Methode createObjects der Klasse {@link GameActivity} 
erstellt werden. Der Spieler kann nun zwei Spieler (auch sich selbst) wählen. Seine Wahl bestätigt er mit Betätigung des 
"Bestätigen" - Buttons. Damit wird die Klasse {@link AmorDB} aufgerufen.

Ist der Spieler nicht Amor, so wird ihm ein schwarzer Display angezeigt. Im Hintergrund ruft ein Runnable in konstanten Zeitabständen die 
Klasse {@link getCurrentPhase} auf.

= LoverActivity =

= WerwolfActivity =

= SeherinActivity =

Wird die SeherinActivity aufgerufen, so wird zu Beginn geprüft, ob der Spieler diese Rolle hat, oder nicht. Ist der die Seherin, so wird er
durch ein PopUp-Info-Fenster der Klasse {@link popup} aufgefordert, einen Spieler zu wählen, dessen Gesinnung er erfahren möchte. Die Wahl
erfolgt über durch die Methode createObjects der Klasse {@link GameActivity} erstellte Spielericons. Wählt der Spieler einen anderen Spieler
aus, so erscheint ein PopUp-Info-Fenster der Klasse {@link popup}, welches dem Spieler mitteilt, ob der von ihm gewählte Spieler 
gut (Dorfbewohner oder Sonderrolle) oder böse (Werwolf) ist. Diese Informationen werden mit Hilfe der Methode getIdentity, welche die Methode
Seherin der Klasse {@link databaseCon} aufruft, erhalten. Bestätigt der Spieler die Informationen mit Betätigung des "OK" - Buttons des 
PopUp-Info-Fensters, so wird {@link setNextPhase} aufgerufen.

Ist der Spieler nicht die Seherin, so wird ihm ein schwarzer Display angezeigt. Im Hintergrund ruft ein Runnable in konstanten Zeitabständen die 
Klasse {@link getCurrentPhase} auf.

= HexeActivity =

= showVictimActivity =

= TagActivity =


== Beschreibung weiterer Klassen == 

= Audio =

= databaseCon =

>DiebGetRole<
Diese Methode startet einen Datenbankaufruf mit Hilfe des PHP-Files get_all_player.php, der Methode "GET" und den {@params gameID}.
Dabei werden die letzten beiden Rollen der Datenbanktabelle "player_game" abgefragt, welche die entsprechende gameID haben, denen jedoch
keine playerID zugeteilt wurde. 
Sie gibt ein Array der Größe 2 mit den beiden besagten Rollen zurück {@return roles}.

>Seherin<
Diese Methode startet einen Datenbankaufruf mit Hilfe des PHP-Files get_player_game_details.php, der Methode "GET" und den 
{@params gameID, playerID}.
Somit wird die Rolle des gewählten Spielers ermittelt. Über eine if-Abfrage wird bestimmt, ob der Spieler gut oder böse ist.
Die Methode gibt einen String "gut" oder "böse" zurück {@return String {gut, böse}}.

= GlobalVariables =

= JSONParser =

= popup =

= createGameDB =

= joinGameDB =

= setReadyDB =

= getCurrentPhase =
Diese Klasse wird als AsyncTask ausgeführt. 

= setNextPhase = 

= NextPhase =

= DiebDB = 
Diese Klasse wird als AsyncTask ausgeführt. Dabei wird ein httprequest mit den Parametern gameID, playerID, der neuen Rolle 
(newRole -> aus params[0]), der Rolle, die nicht gewählt wurde (notChoosen -> aus params[1]) und, wenn der Dieb ein Dorfbewohner 
bleiben möchte, die zweite Rolle, die nicht gewählt wurde (nothingChoosen -> aus params[2]), der Methode "POST" und unter der Nutzung 
des PHP-Files "changeRole.php" an die Datenbank geschickt. Im Zuge dessen wird die Rolle des Diebs entsprechend seiner Wahl geädert,
die überflüssigen Rollen werden aus der "player_game" - Tabelle gelöscht und, wenn nötig, wird die "_PHASES" - Datenbanktabelle geändert.
Dies geschieht, wenn der Dieb sich gegen eine Sonderrolle entscheidet. Sollte dies der Fall sein, so wird die entsprechende Phase gelöscht.
Nach Abschluss der Datenbankkommunikation wird die Klasse {@link setNextPhase} aufgerufen.

= AmorDB =

= HexeDB =

= JaegerDB =

= showVictimDB =
>getVictims<

= killDB = 

= GameOverDB =